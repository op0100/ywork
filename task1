# sudoku_solver_interactive.py

def print_board(board):
    """Prints the Sudoku board in a readable format."""
    for i in range(len(board)):
        if i % 3 == 0 and i != 0:
            print("- - - - - - - - - - - - ")
        for j in range(len(board[0])):
            if j % 3 == 0 and j != 0:
                print(" | ", end="")
            
            cell = board[i][j] if board[i][j] != "" else "."
            if j == 8:
                print(cell)
            else:
                print(cell + " ", end="")

def find_empty(board):
    """Finds the next empty cell in the board, indicated by ''."""
    for i in range(len(board)):
        for j in range(len(board[0])):
            if board[i][j] == "":
                return (i, j)  # Returns (row, col)
    return None

def is_valid(board, num, pos):
    """Checks if placing a number in a given position is valid."""
    row, col = pos
    # Check row
    for i in range(len(board[0])):
        if board[row][i] == num and col != i:
            return False
    # Check column
    for i in range(len(board)):
        if board[i][col] == num and row != i:
            return False
    # Check 3x3 sub-box
    box_x = col // 3
    box_y = row // 3
    for i in range(box_y*3, box_y*3 + 3):
        for j in range(box_x*3, box_x*3 + 3):
            if board[i][j] == num and (i, j) != pos:
                return False
    return True

def solve_sudoku(board):
    """Solves the Sudoku puzzle using a backtracking algorithm."""
    find = find_empty(board)
    if not find:
        return True  # Puzzle is solved
    else:
        row, col = find

    for i in range(1, 10):
        num_str = str(i)
        if is_valid(board, num_str, (row, col)):
            board[row][col] = num_str
            if solve_sudoku(board):
                return True
            # Backtrack if solution not found
            board[row][col] = ""
    return False

if __name__ == "__main__":
    board = []
    print("--- Interactive Sudoku Solver ---")
    print("Enter the puzzle row by row. Use a '0' or '.' for empty cells.")
    
    for i in range(9):
        while True:
            row_str = input(f"Enter Row {i + 1}: ")
            if len(row_str) == 9 and all(c in '0123456789.' for c in row_str):
                # Convert the input string to a list, replacing '0' or '.' with ''
                processed_row = [char if char not in '0.' else "" for char in row_str]
                board.append(processed_row)
                break
            else:
                print("Invalid input. Please enter exactly 9 characters (digits 1-9, and 0 or .).")

    print("\nYour puzzle to solve:")
    print_board(board)

    if solve_sudoku(board):
        print("\n" + "="*25 + "\n")
        print("Solved Sudoku Puzzle:")
        print_board(board)
    else:
        print("\nSorry, this Sudoku puzzle could not be solved.")
